


<script
src="https://code.jquery.com/jquery-3.3.1.min.js"
integrity="sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8="
crossorigin="anonymous"></script>

    <div id="container">
      <canvas width="320" height="240" id="picture"></canvas>
      <input id="Take-Picture" type="file" accept="image/*;capture=camera" />
      <p id="textbit"></p>
      <input type="text" id="barcode" value="">
    </div>
    <script type="text/javascript" src="/JOB.js"></script>
    <script type="text/javascript">
      var takePicture = document.querySelector("#Take-Picture"),
      showPicture = document.createElement("img");
      Result = document.querySelector("#textbit");
      sendBarcode = document.querySelector("#barcode");
      // sendBarcode.value = 'aaaaaaa'; // 表示確認
      var canvas =document.getElementById("picture");
      var ctx = canvas.getContext("2d");
      JOB.Init();
      JOB.SetImageCallback(function(result) {
        if(result.length > 0){
          var tempArray = [];
          for(var i = 0; i < result.length; i++) {
            // tempArray.push(result[i].Format+" : "+result[i].Value);
            tempArray.push(result[i].Value);
          }
          Result.innerHTML=tempArray.join("<br />");
          sendBarcode.value = tempArray;
          // ajaxを記述
          $.ajax({
                url:  "<%= books_search_books_result_path %>",
              type: 'get',
              data: { barcode: tempArray }
              });
        }else{
          if(result.length === 0) {
            Result.innerHTML="Decoding failed.";
          }
        }
      });
      JOB.PostOrientation = true;
      JOB.OrientationCallback = function(result) {
        canvas.width = result.width;
        canvas.height = result.height;
        var data = ctx.getImageData(0,0,canvas.width,canvas.height);
        for(var i = 0; i < data.data.length; i++) {
          data.data[i] = result.data[i];
        }
        ctx.putImageData(data,0,0);
      };
      JOB.SwitchLocalizationFeedback(true);
      JOB.SetLocalizationCallback(function(result) {
        ctx.beginPath();
        ctx.lineWIdth = "2";
        ctx.strokeStyle="red";
        for(var i = 0; i < result.length; i++) {
          ctx.rect(result[i].x,result[i].y,result[i].width,result[i].height); 
        }
        ctx.stroke();
      });
      if(takePicture && showPicture) {
        takePicture.onchange = function (event) {
          var files = event.target.files;
          if (files && files.length > 0) {
            file = files[0];
            try {
              var URL = window.URL || window.webkitURL;
              showPicture.onload = function(event) {
                Result.innerHTML="";
                JOB.DecodeImage(showPicture);
                URL.revokeObjectURL(showPicture.src);
              };
              showPicture.src = URL.createObjectURL(file);
            }
            catch (e) {
              try {
                var fileReader = new FileReader();
                fileReader.onload = function (event) {
                  showPicture.onload = function(event) {
                    Result.innerHTML="";
                    JOB.DecodeImage(showPicture);
                  };
                  showPicture.src = event.target.result;
                };
                fileReader.readAsDataURL(file);
              }
              catch (e) {
                Result.innerHTML = "Neither createObjectURL or FileReader are supported";
              }
            }
          }
        };
      }
    </script>
